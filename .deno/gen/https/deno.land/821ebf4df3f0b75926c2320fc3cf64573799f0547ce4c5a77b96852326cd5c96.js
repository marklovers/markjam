import { dirname, extname, fromFileUrl, gte, join, toFileUrl, walk } from "./deps.ts";
import { error } from "./error.ts";
const MIN_DENO_VERSION = "1.25.0";
export function ensureMinDenoVersion() {
    // Check that the minimum supported Deno version is being used.
    if (!gte(Deno.version.deno, MIN_DENO_VERSION)) {
        let message = `Deno version ${MIN_DENO_VERSION} or higher is required. Please update Deno.\n\n`;
        if (Deno.execPath().includes("homebrew")) {
            message += "You seem to have installed Deno via homebrew. To update, run: `brew upgrade deno`\n";
        } else {
            message += "To update, run: `deno upgrade`\n";
        }
        error(message);
    }
}
export async function collect(directory) {
    const routesDir = join(directory, "./routes");
    const islandsDir = join(directory, "./islands");
    const routes = [];
    try {
        const routesUrl = toFileUrl(routesDir);
        // TODO(lucacasonato): remove the extranious Deno.readDir when
        // https://github.com/denoland/deno_std/issues/1310 is fixed.
        for await (const _ of Deno.readDir(routesDir)){
        // do nothing
        }
        const routesFolder = walk(routesDir, {
            includeDirs: false,
            includeFiles: true,
            exts: [
                "tsx",
                "jsx",
                "ts",
                "js"
            ]
        });
        for await (const entry of routesFolder){
            if (entry.isFile) {
                const file = toFileUrl(entry.path).href.substring(routesUrl.href.length);
                routes.push(file);
            }
        }
    } catch (err) {
        if (err instanceof Deno.errors.NotFound) {
        // Do nothing.
        } else {
            throw err;
        }
    }
    routes.sort();
    const islands = [];
    try {
        const islandsUrl = toFileUrl(islandsDir);
        for await (const entry1 of Deno.readDir(islandsDir)){
            if (entry1.isDirectory) {
                error(`Found subdirectory '${entry1.name}' in islands/. The islands/ folder must not contain any subdirectories.`);
            }
            if (entry1.isFile) {
                const ext = extname(entry1.name);
                if (![
                    ".tsx",
                    ".jsx",
                    ".ts",
                    ".js"
                ].includes(ext)) continue;
                const path = join(islandsDir, entry1.name);
                const file1 = toFileUrl(path).href.substring(islandsUrl.href.length);
                islands.push(file1);
            }
        }
    } catch (err1) {
        if (err1 instanceof Deno.errors.NotFound) {
        // Do nothing.
        } else {
            throw err1;
        }
    }
    islands.sort();
    return {
        routes,
        islands
    };
}
export async function generate(directory, manifest) {
    const { routes , islands  } = manifest;
    const output = `// DO NOT EDIT. This file is generated by fresh.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running \`dev.ts\`.

import config from "./deno.json" assert { type: "json" };
${routes.map((file, i)=>`import * as $${i} from "./routes${file}";`).join("\n")}
${islands.map((file, i)=>`import * as $$${i} from "./islands${file}";`).join("\n")}

const manifest = {
  routes: {
    ${routes.map((file, i)=>`${JSON.stringify(`./routes${file}`)}: $${i},`).join("\n    ")}
  },
  islands: {
    ${islands.map((file, i)=>`${JSON.stringify(`./islands${file}`)}: $$${i},`).join("\n    ")}
  },
  baseUrl: import.meta.url,
  config,
};

export default manifest;
`;
    const proc = Deno.run({
        cmd: [
            Deno.execPath(),
            "fmt",
            "-"
        ],
        stdin: "piped",
        stdout: "piped",
        stderr: "null"
    });
    const raw = new ReadableStream({
        start (controller) {
            controller.enqueue(new TextEncoder().encode(output));
            controller.close();
        }
    });
    await raw.pipeTo(proc.stdin.writable);
    const out = await proc.output();
    await proc.status();
    proc.close();
    const manifestStr = new TextDecoder().decode(out);
    const manifestPath = join(directory, "./fresh.gen.ts");
    await Deno.writeTextFile(manifestPath, manifestStr);
    console.log(`%cThe manifest has been generated for ${routes.length} routes and ${islands.length} islands.`, "color: blue; font-weight: bold");
}
export async function dev(base, entrypoint) {
    ensureMinDenoVersion();
    entrypoint = new URL(entrypoint, base).href;
    const dir = dirname(fromFileUrl(base));
    let currentManifest;
    const prevManifest = Deno.env.get("FRSH_DEV_PREVIOUS_MANIFEST");
    if (prevManifest) {
        currentManifest = JSON.parse(prevManifest);
    } else {
        currentManifest = {
            islands: [],
            routes: []
        };
    }
    const newManifest = await collect(dir);
    Deno.env.set("FRSH_DEV_PREVIOUS_MANIFEST", JSON.stringify(newManifest));
    const manifestChanged = !arraysEqual(newManifest.routes, currentManifest.routes) || !arraysEqual(newManifest.islands, currentManifest.islands);
    if (manifestChanged) await generate(dir, newManifest);
    await import(entrypoint);
}
function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0; i < a.length; ++i){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,